scale: 1
metatile: 4
name: "Riverboat"
bounds: &world
  - -180
  - -85.05112877980659
  - 180
  - 85.05112877980659
center:
- 3.5156
- 47.0402
- 6
format: png
interactivity: false
minzoom: 0
maxzoom: 18
srs: &merc "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over"
extents: &extents
  extent: *world
  srs-name: "900913"
  srs: *merc
db: &db
  dbname: osm
  geometry_field: way
  type: postgis
  extent: -20037508,-19929239,20037508,19929239
  password: null
  user: ybon
  host: ''

Stylesheet:
- palette.mss
- base.mss
- roads.mss
- labels.mss
- waterways.mss

Layer:

- id: land-low
  class: ""
  geometry: "polygon"
  <<: *extents
  Datasource:
    file: "https://osmdata.openstreetmap.de/download/simplified-land-polygons-complete-3857.zip"
    type: shape

- id: land
  class: ""
  geometry: "polygon"
  <<: *extents
  Datasource:
    file: https://osmdata.openstreetmap.de/download/land-polygons-split-3857.zip
    type: shape

- id: landuse_gen0
  geometry: multipolygon
  class: ''
  <<: *extents
  Datasource:
    <<: *db
    table: |-
      ( SELECT way, way_area AS area, COALESCE(landuse, leisure, "natural", highway, amenity, tourism) AS type
        FROM planet_osm_polygon
        WHERE way_area > 100000
       AND (landuse IS NOT NULL
       OR leisure IS NOT NULL
       OR "natural" IS NOT NULL
       OR highway IS NOT NULL
       OR amenity IS NOT NULL
       OR tourism IS NOT NULL)
      ) AS data

- id: landuse_gen1
  class: ''
  geometry: multipolygon
  <<: *extents
  Datasource:
    <<: *db
    table: |-
      ( SELECT way, way_area AS area, COALESCE(landuse, leisure, "natural", highway, amenity, tourism) AS type
        FROM planet_osm_polygon
        WHERE way_area > 10000
        ORDER BY way_area DESC
      ) AS data

- id: landuse
  class: ''
  geometry: polygon
  <<: *extents
  Datasource:
    <<: *db
    table: |-
      ( SELECT way, way_area AS area, COALESCE(landuse, leisure, "natural", highway, amenity, tourism) AS type, tags->'motorboat' as motorboat, tags->'CEMT' as cemt, CASE WHEN tags->'motorboat'='yes' THEN 'yes' WHEN tags ? 'CEMT' THEN 'yes' ELSE 'no' END as navigable
        FROM planet_osm_polygon
        ORDER BY way_area DESC
      ) AS data

- id: water
  class: ''
  geometry: polygon
  <<: *extents
  Datasource:
    <<: *db
    table: |-
      ( SELECT way, way_area AS area, tags->'motorboat' as motorboat, waterway AS type, tags->'CEMT' as cemt, CASE WHEN tags->'motorboat'='yes' THEN 'yes' WHEN tags ? 'CEMT' THEN 'yes' ELSE 'no' END as navigable
        FROM planet_osm_polygon
        WHERE "natural" IN ('water', 'pond')
       OR waterway IN ('basin', 'canal', 'mill_pond', 'pond', 'riverbank', 'stream', 'lock', 'dock')
      ) AS data


- id: waterway_network_high
  class: ''
  geometry: linestring
  <<: *extents
  Datasource:
    <<: *db
    table: "( SELECT way, waterway as type, tags->'motorboat' AS motorboat, tags->'CEMT'
      AS cemt, CASE WHEN tags->'motorboat'='yes' THEN 'yes' WHEN tags ? 'CEMT' THEN
      'yes' ELSE 'no' END as navigable, CAST(tags->'draft' AS FLOAT) AS draft, CASE
      WHEN tags->'maxspeed' ~ E'^-?\\\\d+$' THEN (tags->'maxspeed')::integer ELSE
      null END AS maxspeed, CASE WHEN layer ~ E'^-?\\\\d+$' THEN layer::integer ELSE
      0 END AS layer FROM planet_osm_line WHERE waterway IN ('river', 'canal', 'stream')
      ORDER BY layer) AS data"

- id: navigable_water
  class: ''
  geometry: polygon
  <<: *extents
  Datasource:
    <<: *db
    table: |-
      ( SELECT p.way, p.way_area AS area, p.bridge, CASE WHEN p.layer ~ E'^-?\\d+$'
      THEN p.layer::integer ELSE 0 END AS polylayer from planet_osm_polygon p, planet_osm_line
      l WHERE p.way && !bbox! AND l.way && !bbox! AND ST_Intersects(p.way, l.way)
      AND (p.waterway IN ('riverbank', 'lock') OR p."natural"='water') AND (l.tags
      ? 'CEMT' OR l.tags->'motorboat'='yes') AND ST_IsValid(l.way) = true AND ST_IsValid(p.way)
      = true AND ((p.layer IS NULL and l.layer IS NULL) OR p.layer = l.layer) ORDER
      BY polylayer) AS data

- id: landuse_overlays
  class: ''
  geometry: polygon
  <<: *extents
  Datasource:
    <<: *db
    table: |-
      ( SELECT way, way_area AS area, COALESCE(leisure) AS type
        FROM planet_osm_polygon
        WHERE leisure = 'nature_reserve'
        ORDER BY way_area DESC
      ) AS data

- id: admin
  class: ''
  geometry: linestring
  <<: *extents
  Datasource:
    <<: *db
    table: "( SELECT way, admin_level FROM planet_osm_roads WHERE boundary = 'administrative'
      AND admin_level='2') AS data"


- id: buildings
  class: ''
  geometry: polygon
  <<: *extents
  Datasource:
    <<: *db
    table: |-
      ( SELECT way, "building" AS type
        FROM planet_osm_polygon
        WHERE building NOT IN ('0','false', 'no')
        ORDER BY ST_YMin(ST_Envelope(way)) DESC
      ) AS data

- id: tunnel
  class: ''
  geometry: linestring
  <<: *extents
  Datasource:
    <<: *db
    table: |-
      ( SELECT way, CASE WHEN layer ~ E'^\\d+$' THEN layer::integer  ELSE 0 END as layer, COALESCE(highway, railway) AS type, 0 AS bridge, access, render, 1 as tunnel,
        CASE
          WHEN highway IN ('motorway', 'trunk') THEN 'motorway'
          WHEN highway IN ('primary', 'secondary') THEN 'mainroad'
          WHEN highway IN ('motorway_link', 'trunk_link', 'primary_link', 'secondary_link', 'tertiary', 'tertiary_link', 'residential', 'unclassified', 'road', 'living_street') THEN 'minorroad'
          WHEN highway IN ('service', 'track') THEN 'service'
          WHEN highway IN ('path', 'cycleway', 'footway', 'pedestrian', 'steps', 'bridleway') THEN 'noauto'
          WHEN railway IN ('light_rail', 'subway', 'narrow_gauge', 'rail', 'tram') THEN 'railway'
          ELSE 'other' END AS stylegroup
        FROM (
          SELECT *, '1_outline' AS render FROM planet_osm_line
          WHERE tunnel NOT IN ('', '0', 'no')
          UNION ALL
          SELECT *, '2_line' AS render FROM planet_osm_line
          WHERE tunnel NOT IN ('', '0', 'no')
          UNION ALL
          SELECT *, '3_inline' AS render FROM planet_osm_line
          WHERE tunnel NOT IN ('', '0', 'no')
        ) AS tunnels
        ORDER BY layer ASC, render ASC
      ) AS data

- id: turning_circle_case
  class: ''
  geometry: point
  <<: *extents
  Datasource:
    <<: *db
    table: "( SELECT way \n  FROM planet_osm_point \n  WHERE highway = 'turning_circle'\n)
      AS data"

- id: roads_high
  class: ''
  geometry: linestring
  <<: *extents
  Datasource:
    <<: *db
    table: |-
      ( SELECT way, CASE WHEN layer ~ E'^\\d+$' THEN layer::integer  ELSE 0 END as layer, COALESCE(highway, railway) AS type, 0 AS tunnel, 'no' AS bridge, access, 'fill' AS render,
        CASE
          WHEN highway IN ('motorway', 'trunk') THEN 'motorway'
          WHEN highway IN ('primary', 'secondary') THEN 'mainroad'
          WHEN highway IN ('motorway_link', 'trunk_link', 'primary_link', 'secondary_link', 'tertiary', 'tertiary_link', 'residential', 'unclassified', 'road', 'living_street') THEN 'minorroad'
          WHEN highway IN ('service', 'track') THEN 'service'
          WHEN highway IN ('path', 'cycleway', 'footway', 'pedestrian', 'steps', 'bridleway') THEN 'noauto'
          WHEN railway IN ('light_rail', 'subway', 'narrow_gauge', 'rail', 'tram') AND service IS NULL THEN 'railway'
          ELSE 'other' END AS stylegroup
        FROM planet_osm_line
        WHERE (highway IS NOT NULL OR railway IS NOT NULL)
          AND (tunnel IS NULL OR tunnel = 'no')
          AND (bridge IS NULL OR bridge = 'no')
        ORDER BY railway desc, z_order) AS data

- id: roads_med
  class: ''
  geometry: linestring
  <<: *extents
  Datasource:
    <<: *db
    table: |-
      ( SELECT way, highway AS type
        FROM planet_osm_roads
        WHERE highway IN ('motorway', 'trunk', 'primary', 'secondary', 'motorway_link', 'trunk_link')
      ) AS data

- id: roads_low
  class: ''
  geometry: linestring
  <<: *extents
  Datasource:
    <<: *db
    table: |-
      ( SELECT way, highway AS type, bridge, tunnel
          FROM planet_osm_roads
          WHERE highway IN ('motorway', 'trunk')
      ) AS data

- id: turning_circle_fill
  class: ''
  geometry: point
  <<: *extents
  Datasource:
    <<: *db
    table: "( SELECT way \n  FROM planet_osm_point\n  WHERE highway = 'turning_circle'\n)
      AS data"

- id: bridge
  class: ''
  geometry: linestring
  <<: *extents
  Datasource:
    <<: *db
    table: |-
      ( SELECT way, CASE WHEN layer ~ E'^\\d+$' THEN layer::integer  ELSE 0 END as layer, COALESCE(highway, railway) AS type, 1 AS bridge, access, render, 0 as tunnel,
        CASE
          WHEN highway IN ('motorway', 'trunk') THEN 'motorway'
          WHEN highway IN ('primary', 'secondary') THEN 'mainroad'
          WHEN highway IN ('motorway_link', 'trunk_link', 'primary_link', 'secondary_link', 'tertiary', 'tertiary_link', 'residential', 'unclassified', 'road', 'living_street') THEN 'minorroad'
          WHEN highway IN ('service', 'track') THEN 'service'
          WHEN highway IN ('path', 'cycleway', 'footway', 'pedestrian', 'steps', 'bridleway') THEN 'noauto'
          WHEN railway IN ('light_rail', 'subway', 'narrow_gauge', 'rail', 'tram') THEN 'railway'
          ELSE 'other' END AS stylegroup
        FROM (
          SELECT *, '1_outline' AS render FROM planet_osm_line
          WHERE bridge NOT IN ('', '0', 'no')
          UNION ALL
          SELECT *, '2_line' AS render FROM planet_osm_line
          WHERE bridge NOT IN ('', '0', 'no')
          UNION ALL
          SELECT *, '3_inline' AS render FROM planet_osm_line
          WHERE bridge NOT IN ('', '0', 'no')
        ) AS bridges
        ORDER BY layer ASC, render ASC
      ) AS data

- id: waterway_network
  class: ''
  geometry: linestring
  <<: *extents
  Datasource:
    <<: *db
    table: |-
      ( SELECT way, waterway as type, tags->'motorboat' AS motorboat, tags->'CEMT' AS cemt, CASE WHEN tags->'motorboat'='yes' THEN 'yes' WHEN tags ? 'CEMT' THEN 'yes' ELSE 'no' END as navigable, CAST(tags->'draft' AS FLOAT) AS draft, CASE WHEN tags->'maxspeed' ~ E'^-?\\d+$' THEN (tags->'maxspeed')::integer ELSE null END AS maxspeed FROM planet_osm_line WHERE waterway IN ('river', 'canal') and (tags ? 'motorboat' OR tags ? 'CEMT') AND waterway IS NOT NULL AND (NOT (tags ? 'disused') OR tags->'disused'='no')
      ) AS data

- id: piers_polygons
  class: ''
  geometry: polygon
  <<: *extents
  Datasource:
    <<: *db
    table: |-
      ( SELECT way, man_made, tags->'mooring' as mooring, name
        FROM planet_osm_polygon
        WHERE man_made='pier') AS data

- id: piers
  class: ''
  geometry: linestring
  <<: *extents
  Datasource:
    <<: *db
    table: |-
      ( SELECT way, man_made, tags->'mooring' as mooring, name
        FROM planet_osm_line
        WHERE man_made='pier') AS data


- id: dams_polygons
  class: ''
  geometry: polygon
  <<: *extents
  Datasource:
    <<: *db
    table: "( SELECT way, waterway, name FROM planet_osm_polygon WHERE waterway='dam')
      AS data"

- id: dams
  class: ''
  geometry: linestring
  <<: *extents
  Datasource:
    <<: *db
    table: "( SELECT way, waterway, name FROM planet_osm_line WHERE waterway='dam')
      AS data"

- id: marinas
  class: ''
  geometry: point
  <<: *extents
  Datasource:
    <<: *db
    table: "( SELECT way, COALESCE(tags->'harbour:namenational', name, tags->'int_name')
      as name, CASE WHEN tags->'seasonal'='yes' THEN 'yes' WHEN (leisure='marina'
      AND harbour IS NULL) THEN 'yes' ELSE 'no' END as seasonal FROM planet_osm_point
      WHERE leisure='marina' OR (harbour='yes' AND tags->'harbour:category'='marina')
      UNION SELECT way, COALESCE(tags->'harbour:namenational', name, tags->'int_name')
      as name, CASE WHEN tags->'seasonal'='yes' THEN 'yes' WHEN (leisure='marina'
      AND harbour IS NULL) THEN 'yes' ELSE 'no' END as seasonal FROM planet_osm_polygon
      WHERE harbour='yes' AND tags->'harbour:category'='marina' ORDER BY seasonal)
      AS data"

- id: stations
  geometry: point
  class: stations
  <<: *extents
  Datasource:
    <<: *db
    table: "(SELECT p.way, p.name, p.railway FROM planet_osm_point p, planet_osm_line
      l WHERE p.railway='station' AND l.railway='rail' AND ST_DWithin(l.way, p.way,
      10)) as data"

- id: stations-poly
  class: stations
  geometry: polygon
  <<: *extents
  Datasource:
    <<: *db
    table: (SELECT way,name,railway,aerialway,disused FROM planet_osm_polygon WHERE railway='station' AND disused IS NULL) AS data

- id: piers_symbol
  class: ''
  geometry: linestring
  <<: *extents
  Datasource:
    <<: *db
    table: |-
      ( SELECT way, man_made, tags->'mooring' as mooring, name
        FROM planet_osm_line
        WHERE man_made='pier') AS data

- id: waterway_label
  class: ''
  geometry: linestring
  <<: *extents
  Datasource:
    <<: *db
    table: "( SELECT way, waterway AS type, name, CASE WHEN tags->'motorboat'='yes'
      THEN 'yes' WHEN tags ? 'CEMT' THEN 'yes' ELSE 'no' END as navigable, oneway
      FROM planet_osm_line WHERE waterway IN ('canal', 'river', 'stream') AND name
      IS NOT NULL) AS data"

- id: place
  class: ''
  geometry: point
  <<: *extents
  Datasource:
    <<: *db
    table: "( SELECT way, place AS type, name, z_order, CASE WHEN population ~ E'^\\\\d+$'
      THEN population::integer ELSE 0 END AS population, CASE WHEN place='country'
      THEN 1 WHEN place='state' THEN 10 WHEN place='city' THEN 20 WHEN place='town'
      THEN 30 WHEN place='village' THEN 40 ELSE 100 END as prio FROM planet_osm_point
      WHERE place in ('country', 'state', 'city', 'town', 'village', 'hamlet', 'suburb',
      'neighbourhood', 'locality') ORDER BY prio, population DESC NULLS LAST) AS data"

- id: groyne
  class: ''
  geometry: linestring
  <<: *extents
  Datasource:
    <<: *db
    table: |-
      ( SELECT way, man_made
        FROM planet_osm_line
        WHERE man_made='groyne') AS data

- id: locks
  class: ''
  geometry: linestring
  <<: *extents
  Datasource:
    <<: *db
    table: "(SELECT way, CONCAT_WS(' ',tags->'lock_ref', tags->'lock_name') AS name,
      lock, tags->'lock:height' as height FROM planet_osm_line WHERE lock='yes') AS
      data"

- id: bridge_name
  class: ''
  geometry: linestring
  <<: *extents
  Datasource:
    <<: *db
    srs:
    table: "( SELECT way, CONCAT_WS(' ',tags->'bridge_ref', tags->'bridge_name') AS
      bridge_name FROM planet_osm_line WHERE bridge NOT IN ('', '0', 'no')) AS data"

- id: waterway_signs
  class: ''
  geometry: point
  <<: *extents
  Datasource:
    <<: *db
    table: |-
      ( SELECT way, tags->'waterway:sign' as sign,name FROM planet_osm_point
        WHERE tags ? 'waterway:sign') AS data

- id: pois
  class: ''
  geometry: point
  <<: *extents
  Datasource:
    <<: *db
    table: "( SELECT way, amenity AS type, tags->'waste' AS waste FROM planet_osm_point
      WHERE amenity IN ('drinking_water', 'waste_disposal', 'shower', 'toilets') OR
      (amenity='fuel' AND access='boat')) AS data"

- id: organic_shop
  class: ''
  geometry: point
  <<: *extents
  Datasource:
    <<: *db
    table: "( SELECT way, shop, name FROM planet_osm_point WHERE shop IS NOT NULL
      AND (tags->'organic' IN ('yes', 'only') OR shop='organic')) AS data"

- id: area_label
  class: ''
  geometry: point
  <<: *extents
  Datasource:
    <<: *db
    table: |-
      ( SELECT COALESCE(landuse, leisure, "natural", highway, amenity, tourism) AS type,
          name, way_area AS area,
          ST_PointOnSurface(way) AS way
        FROM planet_osm_polygon
        WHERE name IS NOT NULL
          AND way && !bbox!
          AND ST_IsValid(way)

        UNION ALL

        SELECT 'building' AS type, name, way_area AS area,
          ST_PointOnSurface(way) AS way
        FROM planet_osm_polygon
        WHERE name IS NOT NULL
          AND building NOT IN ('', 'no', '0', 'false')
          AND way && !bbox!
          AND ST_IsValid(way)
        ORDER BY area DESC
      ) AS data

- id: motorway_label
  class: ''
  geometry: linestring
  <<: *extents
  Datasource:
    <<: *db
    table: |-
      ( SELECT way, highway AS type, name, ref, oneway, CHAR_LENGTH(ref) AS reflen
          FROM planet_osm_line
          WHERE highway IN ('motorway', 'trunk')
            AND (name IS NOT NULL OR ref IS NOT NULL)
      ) AS data

- id: mainroad_label
  class: ''
  geometry: linestring
  <<: *extents
  Datasource:
    <<: *db
    table: |-
      ( SELECT way, highway AS type, name, oneway
        FROM planet_osm_line
        WHERE (name IS NOT NULL OR oneway IN ('yes', 'true', '1', '-1'))
          AND highway IN ('primary', 'secondary', 'tertiary')
      ) AS data

- id: minorroad_label
  class: ''
  geometry: linestring
  <<: *extents
  Datasource:
    <<: *db
    table: |-
      ( SELECT way, highway AS type, name, oneway
        FROM planet_osm_line
        WHERE (name IS NOT NULL OR oneway IN ('yes', 'true', '1', '-1'))
          AND highway IN ('residential', 'unclassified', 'road', 'living_street', 'unknown')
      ) AS data
